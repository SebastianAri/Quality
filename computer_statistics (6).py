# -*- coding: utf-8 -*-
"""computer_statistics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12hgb2e77Xct9CWv8YeFcxWSr2JtQuuX9
"""

import time
import math

def read_file(file_path):
    """
    Read the file and return a list of numbers.
    """
    data = []
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            for line_num, line in enumerate(file, start=1):
                try:
                    number = float(line.strip())
                    data.append(number)
                except ValueError:
                    print(f"Warning: Invalid data at line \
                    {line_num}: '{line}'")
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
        return []
    except PermissionError:
        print(f"Error: Permission denied for file \
        '{file_path}'.")
        return []
    # Consider catching more specific exceptions if you
    #have other known possible errors

    return data

def compute_descriptive_statistics(data):
    """
    Compute descriptive statistics and return the results.
    """
    if not data:
        return None, None, None, None, None
    mean = sum(data) / len(data)
    sorted_data = sorted(data)
    n = len(sorted_data)
    median = (sorted_data[n // 2 - 1] + sorted_data[n // 2])\
     / 2 if n % 2 == 0 else sorted_data[n // 2]
    frequency = {}
    for num in data:
        frequency[num] = frequency.get(num, 0) + 1
    mode = [k for k, v in frequency.items() \
            if v == max(frequency.values())]
    mode = mode[0] if mode else None
    variance = sum((x - mean) ** 2 for x in data) / len(data)
    standard_deviation = math.sqrt(variance)
    return mean, median, mode, standard_deviation, variance

def print_and_save_results(results, elapsed_time):
    """
    Print and save the descriptive statistics along
    with the elapsed time.
    """
    mean, median, mode, standard_deviation, variance = results

    print("Descriptive Statistics:")
    print(f"Mean: {mean}")
    print(f"Median: {median}")
    print(f"Mode: {mode}")
    print(f"Standard Deviation: {standard_deviation}")
    print(f"Variance: {variance}")
    print(f"Time Elapsed: {elapsed_time} seconds")

    with open('StatisticsResults.txt', 'w', encoding='utf-8')\
     as result_file:
        result_file.write("Descriptive Statistics:\n")
        result_file.write(f"Mean: {mean}\n")
        result_file.write(f"Median: {median}\n")
        result_file.write(f"Mode: {mode}\n")
        result_file.write(f"Standard Deviation: \
        {standard_deviation}\n")
        result_file.write(f"Variance: {variance}\n")
        result_file.write(f"Time Elapsed: {elapsed_time} seconds\n")

def main(file_name):
    """
    Main function to compute descriptive statistics.
    Assumes file_name is in the current working directory
    or provides a full path.
    """
    # If file_name is not a full path, this will look for it in the
    #current working directory
    file_path = file_name

    start_time = time.time()

    data = read_file(file_path)
    if not data:
        return

    elapsed_time = time.time() - start_time

    results = compute_descriptive_statistics(data)
    print_and_save_results(results, elapsed_time)

main('TC1.txt')

main('TC2.txt')

main('TC3.txt')

main('TC4.txt')

main('TC5.txt')

main('TC6.txt')

main('TC7.txt')

# pylint: disable=C0304