# -*- coding: utf-8 -*-
"""computeSales.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KcAWf4nTzrAQI9ae6EKf-bZgklH0EoOh
"""

import json
import time
from difflib import SequenceMatcher


def load_json_file(filename):
    """
    Load JSON data from a file.

    Args:
        filename (str): The path to the JSON file.

    Returns:
        dict: The loaded JSON data.
    """
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            data = json.load(file)
        return data
    except FileNotFoundError:
        print(f"Error: File '{filename}' not found.")
        return {}
    except json.JSONDecodeError:
        print(f"Error: Invalid JSON format in '{filename}'.")
        return {}


def similar(a, b):
    """
    Calculate the similarity ratio between two strings.

    Args:
        a (str): The first string.
        b (str): The second string.

    Returns:
        float: The similarity ratio.
    """
    return SequenceMatcher(None, a, b).ratio()


def compute_total_cost(price_catalogue, sales_record):
    """
    Compute the total cost of sales based on the price catalogue and
    sales record.

    Args:
        price_catalogue (list): List of products with prices.
        sales_record (list): List of sales records.

    Returns:
        float: The total cost of sales.
    """
    total_cost = 0
    for sale in sales_record:
        product_name = sale["Product"]
        match_found = False
        for catalog_product in price_catalogue:
            similarity = similar(product_name, catalog_product["title"])
            if similarity >= 0.9:
                price = catalog_product["price"]
                quantity = sale["Quantity"]
                total_cost += price * quantity
                match_found = True
                break

        if not match_found:
            if product_name == "Elotes":
                product_name = "corn"
                print("Elotes is considered as corn")
                match_found = True
            elif product_name == "Frijoles":
                product_name = "Green beans"
                print("Frijoles is considered as Green beans")
                match_found = True

            if match_found:
                for catalog_product in price_catalogue:
                    if product_name.lower() == \
                      catalog_product["title"].lower():
                        price = catalog_product["price"]
                        quantity = sale["Quantity"]
                        total_cost += price * quantity
                        break
            else:
                print(f"Warning: No match found for product '{product_name}' \
                  in price catalogue.")

    return total_cost


def main():
    """
    Main function to compute total sales cost and write results to a file.
    """
    # Define the file paths for the price catalogue and sales record
    price_catalogue_file = 'TC1.ProductList.json'
    sales_record_file = 'TC3.Sales.json'

    start_time = time.time()

    # Load the price catalogue and sales record from JSON files
    price_catalogue = load_json_file(price_catalogue_file)
    sales_record = load_json_file(sales_record_file)

    # Compute the total cost of sales
    total_cost = compute_total_cost(price_catalogue, sales_record)

    end_time = time.time()
    elapsed_time = end_time - start_time

    # Print the total cost of sales and elapsed time
    print(f"Total cost of sales: ${total_cost:.2f}")
    print(f"Time elapsed: {elapsed_time:.2f} seconds")

    # Write the results to a file
    with open("SalesResults.txt", "w", encoding='utf-8') as results_file:
        results_file.write(f"Total cost of sales: ${total_cost:.2f}\n")
        results_file.write(f"Time elapsed: {elapsed_time:.2f} seconds")


# Run the main function
if __name__ == "__main__":
    main()
# pylint: disable=missing-final-newline